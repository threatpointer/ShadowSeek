import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Grid,
  Card,
  CardContent,
  Alert,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Stack,
  CircularProgress,
  Pagination,
  Switch,
  FormControlLabel
} from '@mui/material';
import {
  Security,
  Warning,
  Error,
  CheckCircle,
  ExpandMore,
  Download,
  Refresh,
  BugReport,
  PlayArrow,
  FilterList,
  Search,
  Shield,
  Analytics,
  Code,
  Psychology,
  Pattern,
  TrendingUp
} from '@mui/icons-material';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer } from 'recharts';
import { toast } from 'react-toastify';
import { apiClient } from '../utils/api';

// Types for unified security system
interface Binary {
  id: string;
  filename: string;
  original_filename: string;
  analysis_status: string;
}

interface UnifiedSecurityFinding {
  id: string;
  binary_id: string;
  function_id?: string;
  title: string;
  description: string;
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'INFO';
  confidence: number;
  classification: {
    cwe_id?: string;
    cve_id?: string;
    category?: string;
  };
  analysis: {
    ai_explanation?: string;
    pattern_matches?: any[];
    detection_methods: string[];
  };
  location: {
    address?: string;
    file_offset?: number;
    line_number?: number;
  };
  technical_details: {
    affected_code?: string;
    proof_of_concept?: string;
    remediation?: string;
    references?: string[];
  };
  risk_assessment: {
    risk_score: number;
    exploit_difficulty: 'LOW' | 'MEDIUM' | 'HIGH';
    false_positive_risk: 'LOW' | 'MEDIUM' | 'HIGH';
  };
  metadata: {
    analysis_version: string;
    correlation_score: number;
  };
  created_at: string;
  updated_at: string;
}

interface SecuritySummary {
  total: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
  info: number;
  overall_risk_score: number;
  confidence_distribution: {
    high: number;
    medium: number;
    low: number;
  };
}

const ShadowSeekVulnerabilityDashboard: React.FC = () => {
  // State management
  const [binaries, setBinaries] = useState<Binary[]>([]);
  const [selectedBinary, setSelectedBinary] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [analysisRunning, setAnalysisRunning] = useState(false);
  const [findings, setFindings] = useState<UnifiedSecurityFinding[]>([]);
  const [summary, setSummary] = useState<SecuritySummary | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // Filtering and pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filterSeverity, setFilterSeverity] = useState<string>('');
  const [filterCategory, setFilterCategory] = useState<string>('');
  const [confidenceThreshold, setConfidenceThreshold] = useState<number>(0);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [showOnlyAIFindings, setShowOnlyAIFindings] = useState(false);

  // Available filter options
  const severityOptions = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO'];
  const categoryOptions = [
    'buffer_overflow', 'format_string', 'integer_overflow', 'use_after_free',
    'null_pointer', 'command_injection', 'crypto_weakness', 'race_condition',
    'memory_leak', 'double_free', 'heap_overflow', 'stack_overflow'
  ];

  const fetchBinaries = useCallback(async () => {
    try {
      const response = await apiClient.getBinaries(1, 100);
      // Show all binaries, but we'll handle analysis availability in the UI
      setBinaries(response.binaries);
    } catch (err) {
      toast.error('Failed to fetch binaries');
      console.error('Error fetching binaries:', err);
    }
  }, []);

  const clearSecurityData = useCallback(() => {
    setFindings([]);
    setSummary(null);
    setCurrentPage(1);
    setTotalPages(1);
  }, []);

  const loadSecurityData = useCallback(async () => {
    if (!selectedBinary) return;
    
    try {
      setLoading(true);
      setError(null);
      
      // Get security summary and findings
      const securityData = await apiClient.getSecuritySummary(selectedBinary);
      setSummary(securityData.summary);
      
      // Get paginated findings with filters
      const findingsResponse = await apiClient.getSecurityFindings(selectedBinary, {
        page: currentPage,
        perPage: 20,
        severity: filterSeverity || undefined,
        category: filterCategory || undefined,
        confidence_min: confidenceThreshold > 0 ? confidenceThreshold : undefined
      });
      
      let filteredFindings = findingsResponse.findings || [];
      
      // Apply client-side filters
      if (searchTerm) {
        filteredFindings = filteredFindings.filter((finding: UnifiedSecurityFinding) =>
          finding.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          finding.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
          finding.classification.category?.toLowerCase().includes(searchTerm.toLowerCase())
        );
      }
      
      if (showOnlyAIFindings) {
        filteredFindings = filteredFindings.filter((finding: UnifiedSecurityFinding) =>
          finding.analysis.detection_methods.includes('ai_analysis')
        );
      }
      
      setFindings(filteredFindings);
      setTotalPages(findingsResponse.total_pages || 1);
      
    } catch (err: any) {
      const errorMessage = err.response?.data?.error || err.message || 'Failed to load security data';
      setError(errorMessage);
      toast.error(errorMessage);
      console.error('Security data error:', err);
    } finally {
      setLoading(false);
    }
  }, [selectedBinary, currentPage, filterSeverity, filterCategory, confidenceThreshold, searchTerm, showOnlyAIFindings]);

  useEffect(() => {
    fetchBinaries();
  }, [fetchBinaries]);

  useEffect(() => {
    if (selectedBinary) {
      loadSecurityData();
    } else {
      clearSecurityData();
    }
  }, [selectedBinary, loadSecurityData, clearSecurityData]);

  const startSecurityAnalysis = async () => {
    if (!selectedBinary) {
      toast.error('Please select a binary for security analysis');
      return;
    }

    // Check if the selected binary is ready for analysis
    const selectedBinaryData = binaries.find(b => b.id === selectedBinary);
    if (!selectedBinaryData) {
      toast.error('Selected binary not found');
      return;
    }

    // Provide helpful guidance based on binary status
    const status = selectedBinaryData.analysis_status.toLowerCase();
    switch (status) {
      case 'pending':
        toast.warning('This binary is still pending initial analysis. Please wait for basic analysis to complete before running security analysis.');
        return;
      case 'analyzing':
      case 'processing':
        toast.warning('This binary is currently being analyzed. Please wait for the current analysis to complete before running security analysis.');
        return;
      case 'failed':
      case 'error':
        toast.error('This binary failed analysis and cannot be used for security analysis. Try re-uploading the binary.');
        return;
      case 'decompiled':
      case 'completed':
        // These are good to proceed with security analysis
        break;
      default:
        // For any other status, allow the analysis but warn the user
        toast.warning(`Binary status is '${selectedBinaryData.analysis_status}'. Security analysis will proceed but results may be limited.`);
        break;
    }

    try {
      setAnalysisRunning(true);
      setError(null);
      
      console.log(`Starting unified security analysis for binary ${selectedBinary}`);
      
      const analysisResponse = await apiClient.startSecurityAnalysis(selectedBinary, [
        'ai_analysis', 'pattern_matching', 'static_analysis'
      ]);
      
      console.log('Security analysis response:', analysisResponse);
      
      toast.success('Security analysis started successfully');
      
      // Reload data after a short delay
      setTimeout(() => {
        loadSecurityData();
      }, 2000);
      
    } catch (err: any) {
      const errorMessage = err.response?.data?.error || err.message || 'Failed to start security analysis';
      setError(errorMessage);
      toast.error(errorMessage);
      console.error('Security analysis error:', err);
    } finally {
      setAnalysisRunning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return '#d32f2f';
      case 'HIGH': return '#f57c00';
      case 'MEDIUM': return '#fbc02d';
      case 'LOW': return '#388e3c';
      case 'INFO': return '#1976d2';
      default: return '#757575';
    }
  };

  const getSeverityIcon = (severity: string) => {
    const color = getSeverityColor(severity);
    switch (severity) {
      case 'CRITICAL': return <Error style={{ color }} />;
      case 'HIGH': return <Warning style={{ color }} />;
      case 'MEDIUM': return <Warning style={{ color }} />;
      case 'LOW': return <CheckCircle style={{ color }} />;
      case 'INFO': return <CheckCircle style={{ color }} />;
      default: return <BugReport style={{ color }} />;
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return '#4caf50';
    if (confidence >= 50) return '#ff9800';
    return '#f44336';
  };

  const getRiskScoreColor = (riskScore: number) => {
    if (riskScore >= 80) return '#d32f2f';
    if (riskScore >= 60) return '#f57c00';
    if (riskScore >= 40) return '#fbc02d';
    return '#388e3c';
  };

  const exportFindings = () => {
    if (!findings || findings.length === 0) {
      toast.error('No security findings to export');
      return;
    }

    const exportData = {
      binary_id: selectedBinary,
      binary_name: binaries.find(b => b.id === selectedBinary)?.original_filename,
      summary,
      findings,
      exported_at: new Date().toISOString(),
      export_metadata: {
        total_findings: findings.length,
        filters_applied: {
          severity: filterSeverity,
          category: filterCategory,
          confidence_threshold: confidenceThreshold,
          search_term: searchTerm,
          ai_only: showOnlyAIFindings
        }
      }
    };

    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    
    const binary = binaries.find(b => b.id === selectedBinary);
    const filename = `shadowseek_security_findings_${binary?.original_filename || selectedBinary}_${new Date().toISOString().split('T')[0]}.json`;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
    
    toast.success('Security findings exported successfully');
  };

  const renderSecurityMetrics = () => {
    if (!summary) return null;

    const pieData = [
      { name: 'Critical', value: summary.critical, color: '#d32f2f' },
      { name: 'High', value: summary.high, color: '#f57c00' },
      { name: 'Medium', value: summary.medium, color: '#fbc02d' },
      { name: 'Low', value: summary.low, color: '#388e3c' },
      { name: 'Info', value: summary.info, color: '#1976d2' }
    ].filter(item => item.value > 0);

    const confidenceData = [
      { name: 'High Confidence (80-100%)', value: summary.confidence_distribution.high, color: '#4caf50' },
      { name: 'Medium Confidence (50-80%)', value: summary.confidence_distribution.medium, color: '#ff9800' },
      { name: 'Low Confidence (0-50%)', value: summary.confidence_distribution.low, color: '#f44336' }
    ].filter(item => item.value > 0);

    return (
      <Box sx={{ mb: 4 }}>
        {/* Summary Cards */}
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} md={2}>
            <Card sx={{ 
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white'
            }}>
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h3" fontWeight="bold">
                  {summary.total}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Total Findings
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={2.5}>
            <Card sx={{ 
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              color: 'white'
            }}>
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h3" fontWeight="bold">
                  {summary.critical + summary.high}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Critical & High Risk
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={2.5}>
            <Card sx={{ 
              background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
              color: 'white'
            }}>
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h3" fontWeight="bold">
                  {summary.overall_risk_score}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Risk Score (0-100)
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={2.5}>
            <Card sx={{ 
              background: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
              color: 'white'
            }}>
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h3" fontWeight="bold">
                  {Math.round((summary.confidence_distribution.high / Math.max(1, summary.total)) * 100)}%
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  High Confidence
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={2.5}>
            <Card sx={{ 
              background: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',
              color: 'white'
            }}>
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h3" fontWeight="bold">
                  {findings.filter(f => f.analysis.detection_methods.includes('ai_analysis')).length}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  AI-Detected
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>

        {/* Charts */}
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                  <TrendingUp sx={{ mr: 1 }} />
                  Severity Distribution
                </Typography>
                <ResponsiveContainer width="100%" height={250}>
                  <PieChart>
                    <Pie
                      data={pieData}
                      cx="50%"
                      cy="50%"
                      outerRadius={80}
                      dataKey="value"
                      label={({ name, value }) => `${name}: ${value}`}
                    >
                      {pieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <RechartsTooltip />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                  <Analytics sx={{ mr: 1 }} />
                  Confidence Distribution
                </Typography>
                <ResponsiveContainer width="100%" height={250}>
                  <BarChart data={confidenceData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <RechartsTooltip />
                    <Bar dataKey="value" fill="#8884d8" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>
    );
  };

  const renderFilters = () => (
    <Card sx={{ mb: 3 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
          <FilterList sx={{ mr: 1 }} />
          Advanced Filters & Search
        </Typography>
        
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={3}>
            <TextField
              fullWidth
              size="small"
              label="Search Findings"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />
              }}
            />
          </Grid>
          
          <Grid item xs={12} md={2}>
            <FormControl fullWidth size="small">
              <InputLabel>Severity</InputLabel>
              <Select
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
                label="Severity"
              >
                <MenuItem value="">All</MenuItem>
                {severityOptions.map((severity) => (
                  <MenuItem key={severity} value={severity}>{severity}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={2}>
            <FormControl fullWidth size="small">
              <InputLabel>Category</InputLabel>
              <Select
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
                label="Category"
              >
                <MenuItem value="">All</MenuItem>
                {categoryOptions.map((category) => (
                  <MenuItem key={category} value={category}>
                    {category.replace('_', ' ').toUpperCase()}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={2}>
            <TextField
              fullWidth
              size="small"
              type="number"
              label="Min Confidence"
              value={confidenceThreshold}
              onChange={(e) => setConfidenceThreshold(Number(e.target.value))}
              inputProps={{ min: 0, max: 100 }}
            />
          </Grid>
          
          <Grid item xs={12} md={3}>
            <FormControlLabel
              control={
                <Switch
                  checked={showOnlyAIFindings}
                  onChange={(e) => setShowOnlyAIFindings(e.target.checked)}
                />
              }
              label="AI-Detected Only"
            />
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );

  const renderFindingCard = (finding: UnifiedSecurityFinding) => (
    <Accordion key={finding.id} sx={{ mb: 1, border: '1px solid', borderColor: 'divider' }}>
      <AccordionSummary 
        expandIcon={<ExpandMore />}
        sx={{ 
          backgroundColor: 'background.paper',
          '&:hover': { backgroundColor: 'action.hover' }
        }}
      >
        <Box display="flex" alignItems="center" gap={2} width="100%" pr={2}>
          {getSeverityIcon(finding.severity)}
          
          <Box flexGrow={1}>
            <Typography variant="subtitle1" fontWeight="medium">
              {finding.title}
            </Typography>
            
            <Box display="flex" gap={1} mt={0.5} flexWrap="wrap">
              <Chip 
                label={finding.severity}
                size="small"
                sx={{ 
                  backgroundColor: getSeverityColor(finding.severity),
                  color: 'white',
                  fontWeight: 'bold'
                }}
              />
              
              {finding.classification.category && (
                <Chip 
                  label={finding.classification.category.replace('_', ' ')}
                  size="small"
                  variant="outlined"
                  icon={<Code />}
                />
              )}
              
              <Chip 
                label={`Risk: ${finding.risk_assessment.risk_score}`}
                size="small"
                sx={{
                  backgroundColor: getRiskScoreColor(finding.risk_assessment.risk_score),
                  color: 'white'
                }}
              />
              
              <Chip 
                label={`Confidence: ${finding.confidence}%`}
                size="small"
                sx={{
                  backgroundColor: getConfidenceColor(finding.confidence),
                  color: 'white'
                }}
              />
              
              {finding.analysis.detection_methods.includes('ai_analysis') && (
                <Chip 
                  label="AI-Detected"
                  size="small"
                  icon={<Psychology />}
                  sx={{ backgroundColor: '#9c27b0', color: 'white' }}
                />
              )}
              
              {finding.analysis.detection_methods.includes('pattern_matching') && (
                <Chip 
                  label="Pattern Match"
                  size="small"
                  icon={<Pattern />}
                  variant="outlined"
                />
              )}
              
              {finding.classification.cwe_id && (
                <Chip 
                  label={finding.classification.cwe_id}
                  size="small"
                  variant="outlined"
                />
              )}
            </Box>
          </Box>
        </Box>
      </AccordionSummary>
      
      <AccordionDetails>
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Typography variant="body2" paragraph>
              <strong>Description:</strong> {finding.description}
            </Typography>
            
            {finding.analysis.ai_explanation && (
              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  <strong>AI Analysis:</strong> {finding.analysis.ai_explanation}
                </Typography>
              </Alert>
            )}
            
            <Typography variant="body2" paragraph>
              <strong>Location Details:</strong>
            </Typography>
            <Box sx={{ ml: 2, fontFamily: 'monospace', fontSize: '0.875rem', mb: 2 }}>
              {finding.location.address && <div>Address: {finding.location.address}</div>}
              {finding.location.file_offset && (
                <div>File Offset: 0x{finding.location.file_offset.toString(16)}</div>
              )}
              {finding.location.line_number && (
                <div>Line Number: {finding.location.line_number}</div>
              )}
            </Box>
            
            {finding.technical_details.affected_code && finding.technical_details.affected_code.trim() && (
              <>
                <Typography variant="body2" paragraph>
                  <strong>Affected Code:</strong>
                </Typography>
                <Box sx={{ 
                  ml: 2, 
                  fontFamily: 'monospace', 
                  fontSize: '0.75rem',
                  backgroundColor: '#1e1e1e',
                  color: '#d4d4d4',
                  p: 2,
                  borderRadius: 1,
                  maxHeight: '200px',
                  overflow: 'auto',
                  mb: 2,
                  border: '1px solid',
                  borderColor: '#3e3e3e'
                }}>
                  <pre style={{ 
                    margin: 0, 
                    whiteSpace: 'pre-wrap', 
                    wordWrap: 'break-word',
                    color: '#d4d4d4'
                  }}>
                    {finding.technical_details.affected_code.trim()}
                  </pre>
                </Box>
              </>
            )}
            
            {finding.technical_details.remediation && (
              <Alert severity="success" sx={{ mt: 2 }}>
                <Typography variant="body2">
                  <strong>Remediation:</strong> {finding.technical_details.remediation}
                </Typography>
              </Alert>
            )}
          </Grid>
          
          <Grid item xs={12} md={4}>
            <Stack spacing={2}>
              <Paper sx={{ p: 2, backgroundColor: 'background.default' }}>
                <Typography variant="subtitle2" gutterBottom>Risk Assessment</Typography>
                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography variant="body2">Risk Score:</Typography>
                  <Chip 
                    label={`${finding.risk_assessment.risk_score}/100`}
                    size="small"
                    sx={{
                      backgroundColor: getRiskScoreColor(finding.risk_assessment.risk_score),
                      color: 'white'
                    }}
                  />
                </Box>
                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography variant="body2">Exploit Difficulty:</Typography>
                  <Chip 
                    label={finding.risk_assessment.exploit_difficulty}
                    size="small"
                    variant="outlined"
                  />
                </Box>
                <Box display="flex" justifyContent="space-between">
                  <Typography variant="body2">False Positive Risk:</Typography>
                  <Chip 
                    label={finding.risk_assessment.false_positive_risk}
                    size="small"
                    variant="outlined"
                  />
                </Box>
              </Paper>
              
              <Paper sx={{ p: 2, backgroundColor: 'background.default' }}>
                <Typography variant="subtitle2" gutterBottom>Detection Methods</Typography>
                <Stack spacing={0.5}>
                  {finding.analysis.detection_methods.map((method, index) => (
                    <Chip 
                      key={index}
                      label={method.replace('_', ' ').toUpperCase()}
                      size="small"
                      variant="outlined"
                      sx={{ justifyContent: 'flex-start' }}
                    />
                  ))}
                </Stack>
              </Paper>
              
              {finding.classification.cwe_id && (
                <Paper sx={{ p: 2, backgroundColor: 'background.default' }}>
                  <Typography variant="subtitle2" gutterBottom>Classification</Typography>
                  <Box display="flex" justifyContent="space-between" mb={1}>
                    <Typography variant="body2">CWE ID:</Typography>
                    <Typography variant="body2" fontWeight="medium">
                      {finding.classification.cwe_id}
                    </Typography>
                  </Box>
                  {finding.classification.cve_id && (
                    <Box display="flex" justifyContent="space-between">
                      <Typography variant="body2">CVE ID:</Typography>
                      <Typography variant="body2" fontWeight="medium">
                        {finding.classification.cve_id}
                      </Typography>
                    </Box>
                  )}
                </Paper>
              )}
              
              {finding.technical_details.references && finding.technical_details.references.length > 0 && (
                <Paper sx={{ p: 2, backgroundColor: 'background.default' }}>
                  <Typography variant="subtitle2" gutterBottom>References</Typography>
                  {finding.technical_details.references.map((ref, index) => (
                    <Typography key={index} variant="body2" sx={{ fontSize: '0.75rem', mb: 0.5 }}>
                      <a href={ref} target="_blank" rel="noopener noreferrer" style={{ color: 'inherit' }}>
                        {ref}
                      </a>
                    </Typography>
                  ))}
                </Paper>
              )}
            </Stack>
          </Grid>
        </Grid>
      </AccordionDetails>
    </Accordion>
  );

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Box>
          <Typography variant="h4" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
            <Shield sx={{ mr: 2, color: 'primary.main' }} />
            Security Analysis Dashboard
          </Typography>
          <Typography variant="body1" color="text.secondary">
            AI-Powered Binary Security Analysis • Advanced Threat Detection • Evidence-Based Findings
          </Typography>
        </Box>
        
        <Stack direction="row" spacing={2}>
          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={loadSecurityData}
            disabled={!selectedBinary || loading}
          >
            Refresh
          </Button>
          
          <Button
            variant="outlined"
            startIcon={<Download />}
            onClick={exportFindings}
            disabled={!findings || findings.length === 0}
          >
            Export
          </Button>
        </Stack>
      </Box>
      
      {/* Binary Selection and Analysis Controls */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Security Analysis Configuration
        </Typography>
        
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel>Select Binary for Security Analysis</InputLabel>
              <Select
                value={selectedBinary}
                onChange={(e) => setSelectedBinary(e.target.value)}
                label="Select Binary for Security Analysis"
              >
                {binaries.map((binary) => {
                  // Show status indicators but don't disable any binaries
                  const getStatusColor = (status: string) => {
                    switch (status.toLowerCase()) {
                      case 'completed':
                      case 'decompiled':
                        return 'success';
                      case 'analyzing':
                      case 'processing':
                        return 'warning';
                      case 'pending':
                        return 'info';
                      case 'failed':
                      case 'error':
                        return 'error';
                      default:
                        return 'default';
                    }
                  };

                  return (
                    <MenuItem key={binary.id} value={binary.id}>
                      <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
                        <Box display="flex" alignItems="center" gap={1}>
                          <Security />
                          {binary.original_filename}
                        </Box>
                        <Chip 
                          size="small" 
                          label={binary.analysis_status}
                          color={getStatusColor(binary.analysis_status)}
                          sx={{ ml: 1 }}
                        />
                      </Box>
                    </MenuItem>
                  );
                })}
              </Select>
            </FormControl>
            {binaries.length > 0 && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                <strong>All Binaries Available:</strong> You can select any binary for security analysis. 
                The system will provide appropriate guidance based on the binary's current analysis status.
              </Typography>
            )}
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Stack direction="row" spacing={2}>
              {(() => {
                const selectedBinaryData = binaries.find(b => b.id === selectedBinary);
                const isReady = selectedBinaryData ? (selectedBinaryData.analysis_status === 'processed' || selectedBinaryData.analysis_status === 'completed') : false;
                const isDisabled = !selectedBinary || analysisRunning || !isReady;
                
                return (
                  <Button
                    variant="contained"
                    startIcon={analysisRunning ? <CircularProgress size={20} /> : <PlayArrow />}
                    onClick={startSecurityAnalysis}
                    disabled={isDisabled}
                    fullWidth
                    sx={{ 
                      background: isDisabled ? undefined : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',
                      '&:hover': {
                        background: isDisabled ? undefined : 'linear-gradient(45deg, #1976D2 30%, #1CB5E0 90%)'
                      }
                    }}
                  >
                    {analysisRunning 
                      ? 'Running Analysis...' 
                      : !selectedBinary 
                        ? 'Select Binary First' 
                        : !isReady 
                          ? `Cannot Analyze (${selectedBinaryData?.analysis_status})` 
                          : 'Start AI Security Analysis'}
                  </Button>
                );
              })()}
            </Stack>
          </Grid>
        </Grid>
      </Paper>

      {/* Error Display */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {/* Loading Indicator */}
      {loading && (
        <Box display="flex" justifyContent="center" my={3}>
          <CircularProgress />
        </Box>
      )}

      {/* Security Metrics */}
      {summary && renderSecurityMetrics()}

      {/* Filters */}
      {selectedBinary && renderFilters()}

      {/* Security Findings */}
      {findings && findings.length > 0 ? (
        <Box>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">
              Security Findings ({findings.length} found)
            </Typography>
            
            {totalPages > 1 && (
              <Pagination
                count={totalPages}
                page={currentPage}
                onChange={(_, page) => setCurrentPage(page)}
                color="primary"
              />
            )}
          </Box>
          
          {findings.map(renderFindingCard)}
          
          {totalPages > 1 && (
            <Box display="flex" justifyContent="center" mt={3}>
              <Pagination
                count={totalPages}
                page={currentPage}
                onChange={(_, page) => setCurrentPage(page)}
                color="primary"
              />
            </Box>
          )}
        </Box>
      ) : selectedBinary && !loading && (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Shield sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h6" color="text.secondary" gutterBottom>
            No Security Findings Available
          </Typography>
          <Typography variant="body2" color="text.secondary" mb={3}>
            Start a security analysis to discover potential vulnerabilities and security issues.
          </Typography>
          <Button
            variant="contained"
            startIcon={<PlayArrow />}
            onClick={startSecurityAnalysis}
            disabled={analysisRunning}
          >
            Run Security Analysis
          </Button>
        </Paper>
      )}
    </Box>
  );
};

export default ShadowSeekVulnerabilityDashboard; 