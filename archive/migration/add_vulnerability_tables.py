#!/usr/bin/env python3
"""
Database Migration: Add Vulnerability Detection Tables
Adds comprehensive vulnerability detection schema to existing ShadowSeek database
"""

import os
import sys
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from flask_app import create_app, db
from flask_app.models import (
    Vulnerability, VulnerabilityPattern, VulnerabilityReport
)

def create_vulnerability_patterns():
    """Create default vulnerability detection patterns"""
    print("Creating default vulnerability detection patterns...")
    
    patterns = [
        {
            'name': 'Unbounded strcpy Usage',
            'vulnerability_type': 'buffer_overflow',
            'severity': 'high',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'strcpy\s*\(\s*[^,]+\s*,\s*[^)]+\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-120',
            'default_risk_score': 75,
            'confidence_modifier': 10,
            'description': 'strcpy() function usage without bounds checking - high risk of buffer overflow',
            'remediation_template': 'Replace strcpy() with strncpy() or use safer string handling functions like strlcpy()',
            'references': [
                'https://cwe.mitre.org/data/definitions/120.html',
                'https://wiki.sei.cmu.edu/confluence/display/c/STR07-C.+Use+the+bounds-checking+interfaces+for+string+manipulation'
            ]
        },
        {
            'name': 'Dangerous gets() Usage',
            'vulnerability_type': 'buffer_overflow',
            'severity': 'critical',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'gets\s*\(\s*[^)]+\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-120',
            'default_risk_score': 95,
            'confidence_modifier': 20,
            'description': 'gets() function reads unlimited input - always vulnerable to buffer overflow',
            'remediation_template': 'Replace gets() with fgets() and specify buffer size limits',
            'references': [
                'https://cwe.mitre.org/data/definitions/120.html'
            ]
        },
        {
            'name': 'Unbounded sprintf Usage',
            'vulnerability_type': 'buffer_overflow',
            'severity': 'high',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'sprintf\s*\(\s*[^,]+\s*,\s*[^)]+\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-120',
            'default_risk_score': 70,
            'confidence_modifier': 5,
            'description': 'sprintf() function without length checking can cause buffer overflows',
            'remediation_template': 'Replace sprintf() with snprintf() and specify buffer size limits',
            'references': [
                'https://cwe.mitre.org/data/definitions/120.html'
            ]
        },
        {
            'name': 'User-controlled printf Format',
            'vulnerability_type': 'format_string',
            'severity': 'high',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'printf\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-134',
            'default_risk_score': 75,
            'confidence_modifier': 0,
            'description': 'printf() with variable format string - potential format string vulnerability',
            'remediation_template': 'Use format string literals or validate format strings. Use printf("%s", user_input) instead of printf(user_input)',
            'references': [
                'https://cwe.mitre.org/data/definitions/134.html'
            ]
        },
        {
            'name': 'fprintf Variable Format',
            'vulnerability_type': 'format_string',
            'severity': 'high',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'fprintf\s*\(\s*[^,]+\s*,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-134',
            'default_risk_score': 75,
            'confidence_modifier': 0,
            'description': 'fprintf() with variable format string',
            'remediation_template': 'Use format string literals or validate format strings properly',
            'references': [
                'https://cwe.mitre.org/data/definitions/134.html'
            ]
        },
        {
            'name': 'Unchecked malloc Size Calculation',
            'vulnerability_type': 'integer_overflow',
            'severity': 'medium',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'malloc\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\*\s*[a-zA-Z0-9_]+\s*\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-190',
            'default_risk_score': 50,
            'confidence_modifier': -10,
            'description': 'malloc() size calculation may overflow leading to heap corruption',
            'remediation_template': 'Check for integer overflow before multiplication or use overflow-safe allocation functions',
            'references': [
                'https://cwe.mitre.org/data/definitions/190.html'
            ]
        },
        {
            'name': 'system() Command Execution',
            'vulnerability_type': 'command_injection',
            'severity': 'critical',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'system\s*\(\s*[^)]+\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-78',
            'default_risk_score': 90,
            'confidence_modifier': 15,
            'description': 'system() call may allow arbitrary command execution',
            'remediation_template': 'Avoid system() calls. Use execv() family functions with properly sanitized arguments',
            'references': [
                'https://cwe.mitre.org/data/definitions/78.html'
            ]
        },
        {
            'name': 'exec Family Functions',
            'vulnerability_type': 'command_injection',
            'severity': 'high',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'exec[lv]p?\s*\(\s*[^)]+\)',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-78',
            'default_risk_score': 70,
            'confidence_modifier': 5,
            'description': 'exec() family functions may allow command injection if input is not sanitized',
            'remediation_template': 'Sanitize all inputs and avoid constructing commands from user input',
            'references': [
                'https://cwe.mitre.org/data/definitions/78.html'
            ]
        },
        {
            'name': 'MD5 Cryptographic Weakness',
            'vulnerability_type': 'crypto_weakness',
            'severity': 'medium',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'MD5|md5',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-327',
            'default_risk_score': 40,
            'confidence_modifier': -20,
            'description': 'MD5 hash algorithm is cryptographically broken and should not be used for security purposes',
            'remediation_template': 'Replace MD5 with SHA-256, SHA-3, or other secure hash algorithms',
            'references': [
                'https://cwe.mitre.org/data/definitions/327.html'
            ]
        },
        {
            'name': 'SHA1 Cryptographic Weakness',
            'vulnerability_type': 'crypto_weakness',
            'severity': 'low',
            'pattern_type': 'regex',
            'pattern_data': {
                'regex': r'SHA1|sha1',
                'flags': ['IGNORECASE']
            },
            'cwe_id': 'CWE-327',
            'default_risk_score': 25,
            'confidence_modifier': -15,
            'description': 'SHA1 hash algorithm is deprecated and vulnerable to collision attacks',
            'remediation_template': 'Replace SHA1 with SHA-256 or stronger hash algorithms',
            'references': [
                'https://cwe.mitre.org/data/definitions/327.html'
            ]
        }
    ]
    
    created_count = 0
    for pattern_data in patterns:
        # Check if pattern already exists
        existing = VulnerabilityPattern.query.filter_by(name=pattern_data['name']).first()
        if not existing:
            pattern = VulnerabilityPattern(**pattern_data)
            db.session.add(pattern)
            created_count += 1
            print(f"  Created pattern: {pattern_data['name']}")
        else:
            print(f"  Pattern already exists: {pattern_data['name']}")
    
    if created_count > 0:
        db.session.commit()
        print(f"Created {created_count} vulnerability detection patterns")
    else:
        print("All vulnerability patterns already exist")


def run_migration():
    """Run the vulnerability tables migration"""
    print("=" * 60)
    print("VULNERABILITY DETECTION MIGRATION")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        print("\n1. Creating vulnerability detection tables...")
        
        try:
            # Create all tables (will only create new ones)
            db.create_all()
            print("   ✓ Database tables created successfully")
            
            # Verify the new tables exist
            inspector = db.inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            vulnerability_tables = ['vulnerabilities', 'vulnerability_patterns', 'vulnerability_reports']
            missing_tables = [table for table in vulnerability_tables if table not in existing_tables]
            
            if missing_tables:
                print(f"   ⚠ Warning: Some tables were not created: {missing_tables}")
            else:
                print("   ✓ All vulnerability tables verified")
            
        except Exception as e:
            print(f"   ✗ Error creating tables: {e}")
            return False
        
        print("\n2. Creating default vulnerability patterns...")
        try:
            create_vulnerability_patterns()
            print("   ✓ Vulnerability patterns created successfully")
        except Exception as e:
            print(f"   ✗ Error creating patterns: {e}")
            return False
        
        print("\n3. Updating configuration...")
        try:
            from flask_app.models import Configuration
            
            # Add vulnerability-related configuration
            vuln_configs = [
                ('vulnerability_scan_timeout', '600', 'int', 'Vulnerability scan timeout in seconds'),
                ('default_scan_types', '["buffer_overflow", "format_string", "integer_overflow", "command_injection"]', 'json', 'Default vulnerability scan types'),
                ('vulnerability_confidence_threshold', '50', 'int', 'Minimum confidence threshold for vulnerability reports'),
                ('max_vulnerabilities_per_scan', '1000', 'int', 'Maximum vulnerabilities to report per scan')
            ]
            
            config_count = 0
            for key, value, value_type, description in vuln_configs:
                existing = Configuration.query.filter_by(key=key).first()
                if not existing:
                    config = Configuration(
                        key=key,
                        value=value,
                        value_type=value_type,
                        description=description,
                        is_public=True
                    )
                    db.session.add(config)
                    config_count += 1
                    print(f"   Added config: {key}")
            
            if config_count > 0:
                db.session.commit()
                print(f"   ✓ Added {config_count} configuration values")
            else:
                print("   ✓ All configuration values already exist")
                
        except Exception as e:
            print(f"   ✗ Error updating configuration: {e}")
            return False
        
        print("\n4. Testing vulnerability engine...")
        try:
            from flask_app.vulnerability_engine import VulnerabilityEngine
            engine = VulnerabilityEngine()
            
            # Test basic functionality
            dangerous_functions_count = len(engine.dangerous_functions)
            pattern_categories = len(engine.vulnerability_patterns)
            
            print(f"   ✓ Vulnerability engine loaded: {dangerous_functions_count} dangerous functions, {pattern_categories} pattern categories")
            
        except Exception as e:
            print(f"   ✗ Error testing vulnerability engine: {e}")
            return False
    
    print("\n" + "=" * 60)
    print("MIGRATION COMPLETED SUCCESSFULLY!")
    print("=" * 60)
    print("\nVulnerability Detection System is now ready:")
    print("• Database tables: vulnerabilities, vulnerability_patterns, vulnerability_reports")
    print("• API endpoints: /api/binaries/{id}/vulnerabilities/scan, /api/vulnerabilities/*")
    print("• Frontend: VulnerabilityDashboard component integrated")
    print("• Detection engine: Comprehensive static analysis patterns")
    print("\nTo use the vulnerability detection system:")
    print("1. Navigate to the Vulnerability Dashboard in the web interface")
    print("2. Select a binary that has been analyzed (with decompiled functions)")
    print("3. Choose scan types and click 'Start Vulnerability Scan'")
    print("4. View detailed vulnerability reports and export results")
    
    return True


if __name__ == '__main__':
    print("Starting Vulnerability Detection Migration...")
    
    try:
        success = run_migration()
        if success:
            print("\n🎉 Migration completed successfully!")
            sys.exit(0)
        else:
            print("\n❌ Migration failed!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nMigration cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Migration failed with error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 